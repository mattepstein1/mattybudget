{"ast":null,"code":"// Utility functions for date and period calculations\nexport const getNZTDateTime = () => {\n  const now = new Date();\n  return new Date(now.toLocaleString('en-US', {\n    timeZone: 'Pacific/Auckland'\n  })).toISOString();\n};\nexport const getNZTDayString = iso => {\n  const d = new Date(iso);\n  const day = String(d.getDate()).padStart(2, '0');\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const year = d.getFullYear();\n  return `${day}/${month}/${year}`;\n};\nexport const getPeriodRange = (date, frequency) => {\n  let start, end;\n  if (frequency === 'weekly') {\n    const dayOfWeek = date.getDay();\n    start = new Date(date);\n    start.setDate(date.getDate() - (dayOfWeek + 6) % 7); // Monday\n    end = new Date(start);\n    end.setDate(start.getDate() + 6); // Sunday\n  } else if (frequency === 'fortnightly') {\n    const dayOfWeek = date.getDay();\n    start = new Date(date);\n    start.setDate(date.getDate() - (dayOfWeek + 6) % 7); // Monday\n    end = new Date(start);\n    end.setDate(start.getDate() + 13); // 2 Sundays\n  } else if (frequency === 'monthly') {\n    start = new Date(date.getFullYear(), date.getMonth(), 1);\n    end = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n  } else {\n    start = date;\n    end = date;\n  }\n  start.setHours(0, 0, 0, 0);\n  end.setHours(23, 59, 59, 999);\n  return {\n    start,\n    end\n  };\n};","map":{"version":3,"names":["getNZTDateTime","now","Date","toLocaleString","timeZone","toISOString","getNZTDayString","iso","d","day","String","getDate","padStart","month","getMonth","year","getFullYear","getPeriodRange","date","frequency","start","end","dayOfWeek","getDay","setDate","setHours"],"sources":["C:/Users/matth/Desktop/Budget app/budgeting-app/src/utils/dateUtils.ts"],"sourcesContent":["// Utility functions for date and period calculations\r\nexport const getNZTDateTime = () => {\r\n    const now = new Date();\r\n    return new Date(now.toLocaleString('en-US', { timeZone: 'Pacific/Auckland' })).toISOString();\r\n};\r\n\r\nexport const getNZTDayString = (iso: string) => {\r\n    const d = new Date(iso);\r\n    const day = String(d.getDate()).padStart(2, '0');\r\n    const month = String(d.getMonth() + 1).padStart(2, '0');\r\n    const year = d.getFullYear();\r\n    return `${day}/${month}/${year}`;\r\n};\r\n\r\nexport const getPeriodRange = (date: Date, frequency: string) => {\r\n    let start: Date, end: Date;\r\n    if (frequency === 'weekly') {\r\n        const dayOfWeek = date.getDay();\r\n        start = new Date(date);\r\n        start.setDate(date.getDate() - ((dayOfWeek + 6) % 7)); // Monday\r\n        end = new Date(start);\r\n        end.setDate(start.getDate() + 6); // Sunday\r\n    } else if (frequency === 'fortnightly') {\r\n        const dayOfWeek = date.getDay();\r\n        start = new Date(date);\r\n        start.setDate(date.getDate() - ((dayOfWeek + 6) % 7)); // Monday\r\n        end = new Date(start);\r\n        end.setDate(start.getDate() + 13); // 2 Sundays\r\n    } else if (frequency === 'monthly') {\r\n        start = new Date(date.getFullYear(), date.getMonth(), 1);\r\n        end = new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n    } else {\r\n        start = date;\r\n        end = date;\r\n    }\r\n    start.setHours(0,0,0,0);\r\n    end.setHours(23,59,59,999);\r\n    return { start, end };\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,cAAc,GAAGA,CAAA,KAAM;EAChC,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,OAAO,IAAIA,IAAI,CAACD,GAAG,CAACE,cAAc,CAAC,OAAO,EAAE;IAAEC,QAAQ,EAAE;EAAmB,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;AAChG,CAAC;AAED,OAAO,MAAMC,eAAe,GAAIC,GAAW,IAAK;EAC5C,MAAMC,CAAC,GAAG,IAAIN,IAAI,CAACK,GAAG,CAAC;EACvB,MAAME,GAAG,GAAGC,MAAM,CAACF,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAChD,MAAMC,KAAK,GAAGH,MAAM,CAACF,CAAC,CAACM,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACvD,MAAMG,IAAI,GAAGP,CAAC,CAACQ,WAAW,CAAC,CAAC;EAC5B,OAAO,GAAGP,GAAG,IAAII,KAAK,IAAIE,IAAI,EAAE;AACpC,CAAC;AAED,OAAO,MAAME,cAAc,GAAGA,CAACC,IAAU,EAAEC,SAAiB,KAAK;EAC7D,IAAIC,KAAW,EAAEC,GAAS;EAC1B,IAAIF,SAAS,KAAK,QAAQ,EAAE;IACxB,MAAMG,SAAS,GAAGJ,IAAI,CAACK,MAAM,CAAC,CAAC;IAC/BH,KAAK,GAAG,IAAIlB,IAAI,CAACgB,IAAI,CAAC;IACtBE,KAAK,CAACI,OAAO,CAACN,IAAI,CAACP,OAAO,CAAC,CAAC,GAAI,CAACW,SAAS,GAAG,CAAC,IAAI,CAAE,CAAC,CAAC,CAAC;IACvDD,GAAG,GAAG,IAAInB,IAAI,CAACkB,KAAK,CAAC;IACrBC,GAAG,CAACG,OAAO,CAACJ,KAAK,CAACT,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACtC,CAAC,MAAM,IAAIQ,SAAS,KAAK,aAAa,EAAE;IACpC,MAAMG,SAAS,GAAGJ,IAAI,CAACK,MAAM,CAAC,CAAC;IAC/BH,KAAK,GAAG,IAAIlB,IAAI,CAACgB,IAAI,CAAC;IACtBE,KAAK,CAACI,OAAO,CAACN,IAAI,CAACP,OAAO,CAAC,CAAC,GAAI,CAACW,SAAS,GAAG,CAAC,IAAI,CAAE,CAAC,CAAC,CAAC;IACvDD,GAAG,GAAG,IAAInB,IAAI,CAACkB,KAAK,CAAC;IACrBC,GAAG,CAACG,OAAO,CAACJ,KAAK,CAACT,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;EACvC,CAAC,MAAM,IAAIQ,SAAS,KAAK,SAAS,EAAE;IAChCC,KAAK,GAAG,IAAIlB,IAAI,CAACgB,IAAI,CAACF,WAAW,CAAC,CAAC,EAAEE,IAAI,CAACJ,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IACxDO,GAAG,GAAG,IAAInB,IAAI,CAACgB,IAAI,CAACF,WAAW,CAAC,CAAC,EAAEE,IAAI,CAACJ,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;EAC9D,CAAC,MAAM;IACHM,KAAK,GAAGF,IAAI;IACZG,GAAG,GAAGH,IAAI;EACd;EACAE,KAAK,CAACK,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EACvBJ,GAAG,CAACI,QAAQ,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,CAAC;EAC1B,OAAO;IAAEL,KAAK;IAAEC;EAAI,CAAC;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}